#include "resources.hh"
using namespace assembler;
std::map<std::string, cti> Typemap = {
    {"add", {R_TYPE, "0110011", "000", "0000000"}},
    {"sub", {R_TYPE, "0110011", "000", "0100000"}},
    {"xor", {R_TYPE, "0110011", "100", "0000000"}},
    {"or", {R_TYPE, "0110011", "110", "0000000"}},
    {"and", {R_TYPE, "0110011", "111", "0000000"}},
    {"sll", {R_TYPE, "0110011", "001", "0000000"}},
    {"srl", {R_TYPE, "0110011", "101", "0000000"}},
    {"sra", {R_TYPE, "0110011", "101", "0100000"}},
    {"slt", {R_TYPE, "0110011", "010", "0000000"}},
    {"sltu", {R_TYPE, "0110011", "011", "0000000"}},

    {"addi", {I_TYPE, "0010011", "000", ""}},
    {"xori", {I_TYPE, "0010011", "100", ""}},
    {"ori", {I_TYPE, "0010011", "110", ""}},
    {"andi", {I_TYPE, "0010011", "111", ""}},
    {"slli", {I_TYPE, "0010011", "001", ""}},
    {"srli", {I_TYPE, "0010011", "101", ""}},
    {"srai", {I_TYPE, "0010011", "101", ""}},
    {"slti", {I_TYPE, "0010011", "010", ""}},
    {"sltiu", {I_TYPE, "0010011", "011", ""}},
    {"lb", {I_TYPE, "0000011", "000", ""}},
    {"lh", {I_TYPE, "0000011", "001", ""}},
    {"lw", {I_TYPE, "0000011", "010", ""}},
    {"ld", {I_TYPE, "0000011", "011", ""}},
    {"lbu", {I_TYPE, "0000011", "100", ""}},
    {"lhu", {I_TYPE, "0000011", "101", ""}},
    {"lwu", {I_TYPE, "0000011", "110", ""}},
    {"sb", {S_TYPE, "0100011", "000", ""}},
    {"sh", {S_TYPE, "0100011", "001", ""}},
    {"sw", {S_TYPE, "0100011", "010", ""}},
    {"sd", {S_TYPE, "0100011", "011", ""}},
    {"beq", {B_TYPE, "1100011", "000", ""}},
    {"bne", {B_TYPE, "1100011", "001", ""}},
    {"blt", {B_TYPE, "1100011", "100", ""}},
    {"bge", {B_TYPE, "1100011", "101", ""}},
    {"bltu", {B_TYPE, "1100011", "110", ""}},
    {"bgeu", {B_TYPE, "1100011", "111", ""}},
    {"jal", {J_TYPE, "1101111", ""}},
    {"jalr", {I_TYPE, "1100111", "000"}},
    {"lui", {U_TYPE, "0110111", ""}},
    {"auipc", {U_TYPE, "0010111", ""}},
};

// registers
std::map<std::string, std::string> register_to_binary = {
    {"x0", "00000"},
    {"zero", "00000"},
    {"x1", "00001"},
    {"x2", "00010"},
    {"x3", "00011"},
    {"x4", "00100"},
    {"x5", "00101"},
    {"x6", "00110"},
    {"x7", "00111"},
    {"x8", "01000"},
    {"x9", "01001"},
    {"x10", "01010"},
    {"x11", "01011"},
    {"x12", "01100"},
    {"x13", "01101"},
    {"x14", "01110"},
    {"x15", "01111"},
    {"x16", "10000"},
    {"x17", "10001"},
    {"x18", "10010"},
    {"x19", "10011"},
    {"x20", "10100"},
    {"x21", "10101"},
    {"x22", "10110"},
    {"x23", "10111"},
    {"x24", "11000"},
    {"x25", "11001"},
    {"x26", "11010"},
    {"x27", "11011"},
    {"x28", "11100"},
    {"x29", "11101"},
    {"x30", "11110"},
    {"x31", "11111"},
    {"ra", "00001"},
    {"sp", "00010"},
    {"gp", "00011"},
    {"tp", "00100"},
    {"t0", "00101"},
    {"t1", "00110"},
    {"t2", "00111"},
    {"s0", "01000"},
    {"fp", "01000"},
    {"s1", "01001"},
    {"a0", "01010"},
    {"a1", "01011"},
    {"a2", "01100"},
    {"a3", "01101"},
    {"a4", "01110"},
    {"a5", "01111"},
    {"a6", "10000"},
    {"a7", "10001"},
    {"s2", "10010"},
    {"s3", "10011"},
    {"s4", "10100"},
    {"s5", "10101"},
    {"s6", "10110"},
    {"s7", "10111"},
    {"s8", "11000"},
    {"s9", "11001"},
    {"s10", "11010"},
    {"s11", "11011"},
    {"t3", "11100"},
    {"t4", "11101"},
    {"t5", "11110"},
    {"t6", "11111"}};

std::map<std::string_view, std::string> binary_to_hex = {
    {"0000", "0"},
    {"0001", "1"},
    {"0010", "2"},
    {"0011", "3"},
    {"0100", "4"},
    {"0101", "5"},
    {"0110", "6"},
    {"0111", "7"},
    {"1000", "8"},
    {"1001", "9"},
    {"1010", "a"},
    {"1011", "b"},
    {"1100", "c"},
    {"1101", "d"},
    {"1110", "e"},
    {"1111", "f"},
};